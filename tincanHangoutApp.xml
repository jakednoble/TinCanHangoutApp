<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Starter App">
    <Require feature="rpc"/>
  </ModulePrefs>
  <Content type="html"><![CDATA[
<style type="text/css">

</style>

<!-- hangout.js is different for developer sandbox and production -->
<script type="text/javascript" src="//hangoutsapi.talkgadget.google.com/hangouts/_/api/hangout.js?v=1.2"></script>
<script type="text/javascript" src="https://rawgithub.com/RusticiSoftware/TinCanJS/master/build/tincan.js"></script>
<script type="text/javascript" src="https://rawgithub.com/RusticiSoftware/TinCanStatementViewer/master/scripts/base64.js"></script>

<h4>Tincan Hangout Attendance App</h4>

<a id="activityLink" target="_blank" href=""></a>
<br />
<br />
<hr/>
<div id="statementStatus"></div>

<script>
var tinCan;
gadgets.util.registerOnLoadHandler(init);  

function log(msg) {
	if (console && console.log) {
		console.log("TinCanApp: " + msg);
	}
}

function init() {
	log("init");

	// Initialize TinCan
	//TinCan.enableDebug();	
	tinCan = new TinCan (
		{
			recordStores: [
				{
					endpoint: "https://cloud.scorm.com/ScormEngineInterface/TCAPI/public/",
					auth: 'Basic ' + Base64.encode('test:password')
				}
			]
		}
	);
	
	// IE8 Compatibility
	if (!Date.now) {
		Date.now = function now() {
			return +(new Date);
		};
	}
	
	// Register to be notified when the hangout API is ready
	gapi.hangout.onApiReady.add( function(eventObj) {
		try { 
			if (eventObj.isApiReady) { 
					startApp(); 
			}
		} catch (e) { 
			console.log(e.stack); 
		}
	});
}

// Sends a TinCan Statement for this client if one hasn't yet been sent
function startApp() {
	log("Executing logic...");
	//document.getElementById('showParticipants').style.visibility = 'visible';
	
	// Display link to a query for this activity on the statement viewer.
	var activityLink = document.getElementById("activityLink");
	activityLink.innerHTML = "View this activity with the TinCan Statement Viewer!";
	activityLink.setAttribute("href", "http://tincanapi.com/statement-viewer/?activityId=" + buildActivityUri());
	
	// Display some loading text for the TinCan statement
	document.getElementById("statementStatus").innerHTML = "<p>Sending attendance statement...</p>";
	
	// Get the local participant's google+ id
	var participant = gapi.hangout.getLocalParticipant();
	var participantId = participant.person.id;
	
	// Check hangout's state to see if this participant has already sent a TinCan statement for attending
	if (gapi.hangout.data.getValue(participantId)) {
		log("TinCan Statement has already been sent for local participant.");
		// If app reqs expand to show the statement to the user, code should branch to retrieve it here
		document.getElementById("statementStatus").innerHTML = "<p>Your TinCan attendance statement was sent previously.</p>";
		return;
	} else {
		log("Participant needs to generate TinCan statement.");
	}
	
	// Construct a TinCan statement for this user
	var statement = buildTinCanStatement();
	log("TinCan statement built.");
	
	// Send the statement
	tinCan.sendStatement(statement, 
		function(err, xhr) {
			if (err === null) {
				log("Statement sent successfully!");
				// Mark participant as having sent statement in the hangout's state
				gapi.hangout.data.setValue(participantId, "true");
				document.getElementById("statementStatus").innerHTML = "<p>Your TinCan attendance statement has just been sent!</p>";
			} else {
				log("There was an error sending the statement:");
				log(err);
				document.getElementById("statementStatus").innerHTML = "<p>There was an error trying your TinCan attendance statement.</p>";
			}
		}
	);

	log("Done!");
}

// Builds a TinCan statement for the local paticipant attending this hangout
function buildTinCanStatement() {
	var participant = gapi.hangout.getLocalParticipant();
	var actorName = participant.person.displayName;
	var actorAccountHomePage = "https://plus.google.com";
	var actorAccountId = participant.person.id;
	
	var activityUri = buildActivityUri();
	
	var statement = new TinCan.Statement( {
			actor: {
				objectType: "Agent",
				name: actorName,
				account: {
					homePage: actorAccountHomePage,
					name: actorAccountId
				}
			},
			verb: {
				id: "http://adlnet.gov/expapi/verbs/attended",
				display: {"en-US": "attended"}
			},
			object: {
				objectType: "Activity",
				id: activityUri,
				definition: {
					name: {"en-US": "Google Hangout"}
				}
			}
		});
	
	return statement;
}

// Generates a unique and exclusive URI for this hangout room.
// Essentially, this function appends a '/' followed by a timestamp (in epoch time) to the hangout URL.
// The first time this function is called, it sets a timestamp in the hangout's state that all subsequent calls will use.
// In theory this could result in a race condition if the first two (or more) participants to join a room do so at 
// approximately the same time, but in practice this is very unlikely.
function buildActivityUri() {
	log("Synthesizing activityUri...");
	// Check to see if the HangoutTimestamp key has been set in the hangout state
	// NOTE: Possible race condition
	var hangoutTimestamp = gapi.hangout.data.getValue("HangoutTimestamp");
	if (! hangoutTimestamp) {
		// This participant is the first to generate the activity uri and must set up the timestamp.
		log("Initializing hangout timestamp.");
		hangoutTimestamp = Date.now();
		gapi.hangout.data.setValue("HangoutTimestamp", hangoutTimestamp.toString());
	} else {
		log("Found existing hangout timestamp.");
	}
	
	var activityUri = gapi.hangout.getHangoutUrl() + "/" + hangoutTimestamp;
	log("activityUri successfully synthesized.");
	log(activityUri);
	return activityUri;
}                                         
</script>

]]>
</Content>
</Module>